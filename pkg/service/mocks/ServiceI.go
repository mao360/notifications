// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mao360/notifications/models"
	mock "github.com/stretchr/testify/mock"
)

// ServiceI is an autogenerated mock type for the ServiceI type
type ServiceI struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: ctx, username, password
func (_m *ServiceI) GenerateToken(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: ctx, follower
func (_m *ServiceI) GetNotification(ctx context.Context, follower string) ([]string, error) {
	ret := _m.Called(ctx, follower)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, follower)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, follower)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, follower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, username, password
func (_m *ServiceI) GetUser(ctx context.Context, username string, password string) (bool, error) {
	ret := _m.Called(ctx, username, password)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser provides a mock function with given fields: ctx, user
func (_m *ServiceI) NewUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParseToken provides a mock function with given fields: ctx, accessToken
func (_m *ServiceI) ParseToken(ctx context.Context, accessToken string) (*models.User, error) {
	ret := _m.Called(ctx, accessToken)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: ctx, follower, author
func (_m *ServiceI) Subscribe(ctx context.Context, follower string, author string) error {
	ret := _m.Called(ctx, follower, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, follower, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, follower, author
func (_m *ServiceI) Unsubscribe(ctx context.Context, follower string, author string) error {
	ret := _m.Called(ctx, follower, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, follower, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceI creates a new instance of ServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceI {
	mock := &ServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
