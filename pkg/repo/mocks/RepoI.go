// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "github.com/mao360/notifications/models"
	mock "github.com/stretchr/testify/mock"
)

// RepoI is an autogenerated mock type for the RepoI type
type RepoI struct {
	mock.Mock
}

// GetNotification provides a mock function with given fields: followerUsername
func (_m *RepoI) GetNotification(followerUsername string) ([]string, error) {
	ret := _m.Called(followerUsername)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(followerUsername)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(followerUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(followerUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: username, passwordHash
func (_m *RepoI) GetUser(username string, passwordHash string) (bool, error) {
	ret := _m.Called(username, passwordHash)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(username, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(username, passwordHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser provides a mock function with given fields: user
func (_m *RepoI) NewUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: followerUsername, authorUsername
func (_m *RepoI) Subscribe(followerUsername string, authorUsername string) error {
	ret := _m.Called(followerUsername, authorUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(followerUsername, authorUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: followerUsername, authorUsername
func (_m *RepoI) Unsubscribe(followerUsername string, authorUsername string) error {
	ret := _m.Called(followerUsername, authorUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(followerUsername, authorUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepoI creates a new instance of RepoI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoI(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoI {
	mock := &RepoI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
